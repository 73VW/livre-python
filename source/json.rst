JSON
====

.. image:: image/json.gif
   :align: right
   :alt: JSON logo

Par Yoan Blanc (<yoan.blanc@he-arc.ch>)

Introduction
------------

JSON_ ou *JavaScript Object Notation* est un format simple, compact qui a, au
fil des ans, remplac√© XML comme format d'√©change pr√©f√©r√©. Standardis√© au sein
de l'`ECMA-404`_ il est support√© par l'√©norme majorit√© des langages de
programmations.

JSON comporte six types : chaines de caract√®res, nombre, objet, tableau,
bool√©en (``true``, ``false``) et ``null``.

.. code-block:: json
    :linenos:

    {
        "cl√©": "valeur",
        "age": 20,
        "pi": 314.59e-2,
        "tableau": [1, 2, 3, ["x", "y"]],
        "objet": {
            "cl√©": "autre valeur",
            "bool√©en": false
        },
        "rien": null
    }

Il serait possible de lire directement cette structure de donn√©e en Python si
les bool√©ens et la valeur vide n'√©taient pas √©crites diff√©remment : ``True``,
``False`` et ``None``.

Le module :py:mod:`json` est des plus simples √† utilis√©. Il est pr√©sent√© par
Kenneith Reitz dans `Hitchiker's Guide To Python
<http://docs.python-guide.org/en/latest/scenarios/json/>`_.

Exemple
-------

L'API du module :py:mod:`json` est similaire √† celle utilis√©e par
:py:mod:`marshal` et :py:mod:`pickle` qui permettent de s√©rialiser des objets
Python.

- :py:meth:`json.load` charge un fichier JSON;
- :py:meth:`json.loads` charge une chaine de caract√®res;
- :py:meth:`json.dump` √©crit en JSON dans fichier;
- :py:meth:`json.dumps` √©crit en JSON dans une chaine de caract√®res.

.. code-block:: python3
   :linenos:

    import json

    print(json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}]))
    ["foo", {"bar": ["baz", null, 1.0, 2]}]

    print(json.dumps("üêç"))
    "\\ud83d\\udc0d"

    print(json.loads('[1, 2, "Hello"]'))
    [1, 2, 'Hello']

Un exemple travaillant avec un fichier externe. Un point tr√®s important est
que JSON est toujours encod√© en UTF-8.

.. literalinclude:: example/json/test.json
   :linenos:

.. literalinclude:: example/json/example.py
   :linenos:

Validation
----------

:py:mod:`jsonschema` permet de valider un document JSON selon un mod√®le.
consultez la documentation de `JSON Schema`_ pour en savoir plus.

.. literalinclude:: example/json/schema.json
   :linenos:

.. literalinclude:: example/json/validation.py
   :linenos:

Conclusion
----------

JSON est un format de fichier √† connaitre, comprendre et savoir utiliser. Dans
sa version basique, voire m√™me dans sa version riche nomm√©e `JSON-LD`_ utilis√©e
par de nombreuses API. Si vous devez consommer des donn√©es JSON externe, il
n'est que vivement recommand√© d'ajouter un sch√©ma afin d'offrir un message
d'erreur ad√©quate en cas d'erreur avant que votre application ne casse.

    *JSON c'est bon, mangez-en!*

    -- Anonymous

.. Bibliographie

.. _JSON: http://json.org/
.. _JSON Schema: http://json-schema.org/
.. _JSON-LD: http://json-ld.org/
.. _ECMA-404: http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf
